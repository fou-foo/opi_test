rawData <- read.csv(unzip(temp, 'repdata%2Fdata%2FStormData.csv'))
rawData <- read.csv(unzip(temp, '/tmp/RtmplhbgLv/file5a8d594ddc58:repdata%2Fdata%2FStormData.csv'))
ls()
temp
rawData <- read.csv(unzip(temp, '/tmp/RtmplhbgLv/file5a8d594ddc58'))
rawData <- read.csv(unz(temp, '/tmp/RtmplhbgLv/file5a8d594ddc58'))
unz(temp,'')
rawData <- read.csv(unz(temp, 'tmp/RtmplhbgLv/file5a8d594ddc58:'))
rawData <- read.csv(unz(temp, '/tmp/RtmplhbgLv/file5a8d594ddc58:'))
bzfile(temp)
rawData <- read.csv(bzfile(temp))
head(rawData)
View(rawData)
View(rawData)
names(rawData)
head(rawData$EVTYPE)
unique(rawData$EVTYPE)
help.search("read.csv")
?read.csv
??read
??read.cs
??download.fil
View(rawData)
View(rawData)
names(rawData)
head(rawData$EVTYPE)
head(rawData$EVTYPE,20)
tail(rawData$EVTYPE,20)
names(rawData)
Data <- rawData %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG)
library(dplyr)
Data <- rawData %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG)
library(dplyr)
Data <- rawData %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG)
class(Data$EVTYPE)
class(Data$FATALITIES)
class(Data$INJURIES)
class(Data$PROPDMG)
mean(is.na(Data$FATALITIES))
mean(is.na(Data$INJURIES))
mean(is.na(Data$PROPDMG))
NAprop <- sum(is.na(Data$PROPDMG))
NAprop <- sum(is.na(Data$PROPDMG))
NAFata <- sum(is.na(Data$FATALITIES))
NAInj <- sum(is.na(Data$INJURIES))
library(ggplot2)
?multiplot
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
names(data)
names(Data)
ggplot(Data, aes(x = FATALITIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'deepskyblue2') + ggtitle("FATALITIES' distribution") + ylab('')+ xlab('') +theme_bw()
```
summary(Data)
ggplot(Data, aes(x = INJURIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'stateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw()
```
ggplot(Data, aes(x = INJURIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'stateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw()
```
ggplot(Data, aes(x = INJURIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'slateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw()
summary(Data)
ggplot(Data, aes(x = PROPDMG)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'slateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw()
table(Data$FATALITIES)
ggplot(Data, aes(x = FATALITIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'deepskyblue2') + ggtitle("FATALITIES' distribution") + ylab('')+ xlab('') +theme_bw() +
scale_x_log10()
ggplot(Data, aes(x = INJURIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'slateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() +scale_x_log10()
ggplot(Data, aes(x = PROPDMG)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'slateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() +scale_x_log10(
ggplot(Data, aes(x = PROPDMG)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'lightseagreen') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() +scale_x_log10(
)
)
ggplot(Data, aes(x = PROPDMG)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'lightseagreen') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_log10()
ggplot(Data, aes(x = FATALITIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'deepskyblue2') + ggtitle("FATALITIES' distribution") + ylab('')+ xlab('') +theme_bw() +
scale_x_sqrt()
ggplot(Data, aes(x = INJURIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'slateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_sqrt()
ggplot(Data, aes(x = PROPDMG)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'lightseagreen') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_sqrt()
ggplot(Data, aes(x = FATALITIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'deepskyblue2') + ggtitle("FATALITIES' distribution") + ylab('')+ xlab('') +theme_bw() +
scale_x_sqrt()
ggplot(Data, aes(x = FATALITIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'deepskyblue2') + ggtitle("FATALITIES' distribution") + ylab('')+ xlab('') +theme_bw() +
scale_x_log10()
ggplot(Data, aes(x = INJURIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'slateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_log10()
ggplot(Data, aes(x = PROPDMG)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'lightseagreen') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_sqrt()
ggplot(Data, aes(x = PROPDMG)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'lightseagreen') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_log10()
summary(Data)
ggplot(Data, aes(x = PROPDMG)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'lightseagreen') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_sqrt()
p1 <-ggplot(Data, aes(x = FATALITIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'deepskyblue2') + ggtitle("FATALITIES' distribution") + ylab('')+ xlab('') +theme_bw() +
p2 <-ggplot(Data, aes(x = INJURIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'slateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_log10()
p3 <- ggplot(Data, aes(x = PROPDMG)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'lightseagreen') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_sqrt()
p2 <-ggplot(Data, aes(x = INJURIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'slateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_log10()
p1 <-ggplot(Data, aes(x = FATALITIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'deepskyblue2') + ggtitle("FATALITIES' distribution") + ylab('')+ xlab('') +theme_bw() +
scale_x_log10()
p2 <-ggplot(Data, aes(x = INJURIES)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'slateblue') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_log10()
p3 <- ggplot(Data, aes(x = PROPDMG)) + geom_histogram(aes(y = ..count../sum(..count..)), fill = 'lightseagreen') + ggtitle("INJURIES' distribution") + ylab('')+ xlab('') +theme_bw() + scale_x_sqrt()
multiplotp1,p2,p3
multiplot(p1,p2,p3)
multiplot(p1,p2,p3, cols = 2)
multiplot(p1,p2,p3)
library(xtable)
print(xtable(summary(Data)), booktabs = TRUE)
barplot(table(Data$FATALITIES))
barplot(table(Data$INJURIES))
table(Data$FATALITIES)/dim(Data)[1]
table(Data$INJURIES)/dim(Data)[1]
table(Data$FATALITIES)/dim(Data)[1]
table(Data$FATALITIES)
names(Data)
sum <- Data %>% group_by(EVTYPE) %>% summarise(FATALITIES= sum(FATALITIES), INJURIES = sum(INJURIES),
PROPDMG = SUM(PROPDMG))
sum <- Data %>% group_by(EVTYPE) %>% summarise(FATALITIES= sum(FATALITIES), INJURIES = sum(INJURIES),
PROPDMG = sum(PROPDMG))
sum <- sum %>% arrange(FATALITIES)
sum
sum <- sum %>% arrange(FATALITIES)
sum
?arrange
sum <- sum %>% arrange(desc(FATALITIES))
sum
fata <- sum %>% arrange(desc(FATALITIES))
fata <- sum %>% arrange(desc(FATALITIES))
inj <- sum %>% arrange(desc(INJURIES))
prop <- sum %>% arrange(desc(PROPDMG))
fata
inj
fata <- sum %>% arrange(desc(FATALITIES)) %>% filter(row_number()<11)
inj <- sum %>% arrange(desc(INJURIES)) %>% filter(row_number()<11)
prop <- sum %>% arrange(desc(PROPDMG)) %>% filter(row_number()<11)
intersect(fata$EVTYPE,inj$EVTYPE)
intersect(fata$EVTYPE,prop$EVTYPE)
ggplot(sum, aes(FATALITIES + INJURIES)) + geom_bar()
ggplot(sum, aes(FATALITIES)) + geom_bar()
names(sum)
ggplot(sum, aes(FATALITIES + INJURIES)) + geom_bar()
ggplot(sum, aes(FATALITIES )) + geom_bar()
fata <- sum %>% arrange(desc(FATALITIES)) %>% filter(row_number()<11)
inj <- sum %>% arrange(desc(INJURIES)) %>% filter(row_number()<11)
prop <- sum %>% arrange(desc(PROPDMG)) %>% filter(row_number()<11)
ggplot(fata, aes(FATALITIES + INJURIES)) + geom_bar()
ggplot(fata, aes(FATALITIES)) + geom_bar()
fata
ggplot(fata, aes(FATALITIES + INJURIES)) + geom_bar(stat = 'identity')
ggplot(fata, aes(EVTYPE,FATALITIES + INJURIES)) + geom_bar(stat = 'identity')
ggplot(fata, aes(EVTYPE, FATALITIES + INJURIES)) + geom_bar(stat = 'identity')
ggplot(fata, aes(EVTYPE, reorder_size(FATALITIES + INJURIES))) + geom_bar(stat = 'identity')
fata <- Data %>% group_by(EVTYPE) %>% summarise(suma = sum(FATALITIES) ) %>%
arrange(desc(FATALITIES)) %>% filter(row_number()<11)
Data %>% group_by(EVTYPE) %>% summarise(suma = sum(FATALITIES) ) %>%
arrange(desc(FATALITIES))
fata <- Data %>% group_by(EVTYPE) %>% summarise(suma = sum(FATALITIES) ) %>%
arrange(desc(suma)) %>% filter(row_number()<11)
fata$tipo <- 'FATALITIES'
inj <- Data %>% group_by(EVTYPE) %>% summarise(suma = sum(INJURIES) ) %>%
arrange(desc(suma)) %>% filter(row_number()<11)
inj$tipo <- 'INJURIES'
prop <- Data %>% group_by(EVTYPE) %>% summarise(suma = sum(PROPDMG) ) %>%
arrange(desc(suma)) %>% filter(row_number()<11)
prop$tipo <- 'PROPDMG'
p <- rbind(fata, inj, prop)
p
ggplot(p, aes(EVTYPE, suma)) + geom_bar(stat = 'identity')
p <- rbind(fata, inj)
ggplot(p, aes(EVTYPE, suma)) + geom_bar(stat = 'identity')
ggplot(p, aes(EVTYPE, suma)) + geom_bar(stat = 'identity') + ylab('')+ xlab('') +theme_bw()
ggplot(p, aes(EVTYPE, suma)) + geom_bar(stat = 'identity', fill = tipo) + ylab('')
+ xlab('') +theme_bw()
p <- rbind(fata, inj)
names(p)
ggplot(p, aes(EVTYPE, suma)) + geom_bar(stat = 'identity', fill = tipo) + ylab('')
ggplot(p, aes(EVTYPE, suma)) + geom_bar(stat = 'identity', fill = factor(tipo))
ggplot(p, aes(EVTYPE, suma, fill = factor(tipo))) + geom_bar(stat = 'identity') + ylab('')
+ xlab('') +theme_bw()
ggplot(p, aes(EVTYPE, suma, fill = factor(tipo))) + geom_bar(stat = 'identity') + ylab('')+  xlab('') +theme_bw()
?guides
ggplot(p, aes(EVTYPE, suma, fill = factor(tipo))) + geom_bar(stat = 'identity') + ylab('')+  xlab('') +theme_bw()+guides(fill=guide_legend(title=NULL))  #http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/
ggplot(p, aes(EVTYPE, suma, fill = factor(tipo))) + geom_bar(stat = 'identity') + ylab('Damage to health (top 10)')+  xlab('') +theme_bw()+guides(fill=guide_legend(title=NULL))  #http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/
ggplot(p, aes(EVTYPE, suma, fill = factor(tipo))) + geom_bar(stat = 'identity') + ylab('')+  xlab('') +theme_bw()+guides(fill=guide_legend(title=NULL)) + ggtitle('Damage to health (top 10)) #http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/
')'
''
ggplot(p, aes(EVTYPE, suma, fill = factor(tipo))) + geom_bar(stat = 'identity') + ylab('')+  xlab('') +theme_bw()+guides(fill=guide_legend(title=NULL)) + ggtitle('Damage to health (top 10)') #http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/
unique(rawData$STATE__)
r1 <-ggplot(p, aes(EVTYPE, suma, fill = factor(tipo))) + geom_bar(stat = 'identity') + ylab('')+  xlab('') +theme_bw()+guides(fill=guide_legend(title=NULL)) + ggtitle('Damage to health (top 10)') #http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/
r2 <-ggplot(prop, aes(EVTYPE, suma) + geom_bar(stat = 'identity') + ylab('')+  xlab('') +theme_bw()+guides(fill=guide_legend(title=NULL)) + ggtitle('Damage economic (top 10)')
)
r2 <- ggplot(prop, aes(EVTYPE, suma) + geom_bar(stat = 'identity') + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
ggtitle('Economic damage (top 10)')
r2 <- ggplot(prop, aes(EVTYPE, suma)) + geom_bar(stat = 'identity') + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
r2
library(RColorBrewer)
r2 <- ggplot(prop, aes(EVTYPE, suma), fill = brewer.pal(dim(prop)[1], "Purples")) + geom_bar(stat = 'identity') + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
brewer.pal(dim(prop)[1], "Purples"))
brewer.pal(dim(prop)[1], "Purples")
brewer.pal(9, "Purples")
r2 <- ggplot(prop, aes(EVTYPE, suma), fill = brewer.pal(9, "Purples")) + geom_bar(stat = 'identity') + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
rep(brewer.pal(9, "Purples"),round(dim(prop)[1]/9))
r2 <- ggplot(prop, aes(EVTYPE, suma), fill = rep(brewer.pal(9, "Purples"),round(dim(prop)[1]/9)) + geom_bar(stat = 'identity') + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
r2
r2 <- ggplot(prop, aes(EVTYPE, suma), fill = rep(brewer.pal(9, "Purples"),round(dim(prop)[1]/9))) + geom_bar(stat = 'identity') + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
r2 <- ggplot(prop, aes(EVTYPE, suma), fill = rep(brewer.pal(9, "Purples"),round(dim(prop)[1]/2))) + geom_bar(stat = 'identity') + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
r2 <- ggplot(prop, aes(EVTYPE, suma), fill = brewer.pal(dim(prop)[1], "Spectral")) + geom_bar(stat = 'identity') + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
r2
r2 <- ggplot(prop, aes(EVTYPE, suma), fill = brewer.pal(dim(prop)[1], "Spectral")) + geom_bar(stat = 'identity') + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
r2
brewer.pal(dim(prop)[1], "Spectral"))
brewer.pal(dim(prop)[1], "Spectral")
r2 <- ggplot(prop, aes(EVTYPE, suma)) + geom_bar(stat = 'identity',fill = brewer.pal(dim(prop)[1], "Spectral")) + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
r2
r2 <- ggplot(prop, aes(EVTYPE, suma)) + geom_bar(stat = 'identity',fill = brewer.pal(dim(prop)[1], "Purples")) + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
r2
r2 <- ggplot(prop, aes(EVTYPE, suma)) + geom_bar(stat = 'identity',fill = brewer.pal(dim(prop)[1], "Set")) + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
r2
r2 <- ggplot(prop, aes(EVTYPE, suma)) + geom_bar(stat = 'identity',fill = brewer.pal(dim(prop)[1], "Set3")) + ylab('') + xlab('') + theme_bw() +  ggtitle('Economic damage (top 10)')
r2
multiplot(r1, r2)
rownames(p)
p$EVTYPE
p <- rbind(fata, inj)
intersect(fata$EVTYPE, inj$EVTYPE)
p$EVTYPE
fata$EVTYPE
intersect(fata$EVTYPE, inj$EVTYPE)
inj$EVTYPE
intersect(fata$EVTYPE, inj$EVTYPE)
?intersect
setdiff( fata$EVTYPE, intersect(fata$EVTYPE, inj$EVTYPE))
setdiff( inj$EVTYPE, intersect(fata$EVTYPE, inj$EVTYPE))
intersect(fata$EVTYPE, inj$EVTYPE)
p$EVTYPE
intersect(intersect(fata$EVTYPE, inj$EVTYPE), prop$EVTYPE)
unique(rawData$BGN_DATE)
sort(unique(rawData$BGN_DATE))
library(lubridate)
mdy(rawData$BGN_DATE[1:10])
?mdy
mdy(rawData$BGN_DATE[1:10])
?grep
library(lubridate)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(xtable)
sept <- read.csv('2016-09.csv', sep = ';')
oct <- read.csv('2016-10.csv', sep = ',')
nov <- read.csv('2016-11.csv', sep = ',', header = FALSE)
names(nov) <- names(sept)
sept$Fecha_Arribo <- dmy(sept$Fecha_Arribo)
sept <- read.csv('2016-09.csv', sep = ';')
setwd('/home/fou/Desktop/opi')
sept <- read.csv('2016-09.csv', sep = ';')
oct <- read.csv('2016-10.csv', sep = ',')
nov <- read.csv('2016-11.csv', sep = ',', header = FALSE)
names(nov) <- names(sept)
sept$Fecha_Arribo <- dmy(sept$Fecha_Arribo)
sept$Fecha_Retiro <- dmy(sept$Fecha_Retiro)
oct$Fecha_Arribo <- dmy(oct$Fecha_Arribo)
oct$Fecha_Retiro <- dmy(oct$Fecha_Retiro)
nov$Fecha_Arribo <- ymd(nov$Fecha_Arribo)
nov$Fecha_Retiro <- ymd(nov$Fecha_Retiro)
eco <- rbind(sept, oct, nov)
eco$Hora_Arribo <- hms(eco$Hora_Arribo)
etl <- function(x)
{
if( !is.na(x) & nchar(x) < 2  )
{
return (paste0('0',x))
}
return (x)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p1 <- eco %>% group_by(Ciclo_Estacion_Arribo) %>%
summarise(Incidencias = n()) %>% arrange( desc(Incidencias))
p1 <- filter(p1, row_number() < 28 )
p1$Ciclo_Estacion_Arribo <- factor(p1$Ciclo_Estacion_Arribo,
levels = p1$Ciclo_Estacion_Arribo[ order(p1$Incidencias)])
g2 <- ggplot(p1, aes(x = factor(Ciclo_Estacion_Arribo), y = Incidencias )) +
geom_bar(stat = 'identity', fill = rep(brewer.pal(9, "RdPu"),3)) + ylab('Viajes') + xlab('') + theme_bw() +  ggtitle('Estaciones con mayor afluencia')
multiplot(g1, g2)
estaciones <- unique(eco$Ciclo_Estacion_Arribo)
a <- subset(eco, Ciclo_Estacion_Arribo == estaciones[1] )
a2 <-a%>%arrange(Ciclo_Estacion_Arribo, Fecha_Arribo) %>%
group_by(Ciclo_Estacion_Arribo, Fecha_Arribo) %>% summarise(cuenta = n())
ggplot(a2, aes(Fecha_Arribo, cuenta)) +geom_line()
ggplot(a2, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE)
res <- eco%>%arrange(Ciclo_Estacion_Arribo, Fecha_Arribo) %>%
group_by(Ciclo_Estacion_Arribo, Fecha_Arribo) %>% summarise(cuenta = n())
200*90
length(unique(eco$Ciclo_Estacion_Arribo))
457*90
ggplot(res, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Ciclo_Estacion_Arribo)
res2 <- res %>% filter(row_number() <10)
ggplot(res2, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Ciclo_Estacion_Arribo)
res <- eco%>%arrange(Ciclo_Estacion_Arribo, Fecha_Arribo) %>%
group_by(Ciclo_Estacion_Arribo, Fecha_Arribo) %>% summarise(cuenta = n())
res2 <- res %>% filter(row_number() <10)
res
res2 <- res %>% filter(row_number() <5)
res2 <- res %>% filter(row_number() <3)
res2 <- res %>% filter(row_number() <2)
res2 <- res %>% filter(row_number() <1)
res2 <- res %>% filter(row_number() <2)
ggplot(res2, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Ciclo_Estacion_Arribo)
res <- eco%>%arrange(Ciclo_Estacion_Arribo, Fecha_Arribo) %>%
group_by(Ciclo_Estacion_Arribo, Fecha_Arribo) %>% summarise(cuenta = n()) %>% mutate(i = row_number())
res2 <- res %>% filter(row_number() <2)
res
res2 <- res %>% filter(i <10)
res <- eco%>%arrange(Ciclo_Estacion_Arribo, Fecha_Arribo) %>%
group_by(Ciclo_Estacion_Arribo, Fecha_Arribo) %>% summarise(cuenta = n())
res <- mutate(res, i = row_number())
tail(res)
res2 <- res %>% filter(i <10)
res <- eco%>%arrange(Ciclo_Estacion_Arribo, Fecha_Arribo) %>%
group_by(Ciclo_Estacion_Arribo, Fecha_Arribo) %>% summarise(cuenta = n())
res2 <- res[1:100,]
ggplot(res2, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ .Ciclo_Estacion_Arribo)
ggplot(res2, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Ciclo_Estacion_Arribo)
estaciones <- unique(eco$Ciclo_Estacion_Arribo)
res <- eco%>%arrange(Ciclo_Estacion_Arribo, Fecha_Arribo) %>%
group_by(Ciclo_Estacion_Arribo, Fecha_Arribo) %>% summarise(cuenta = n())
res
res$Ciclo_Estacion_Arribo[1]
z <-res$Ciclo_Estacion_Arribo[1]
a <- subset(res, Ciclo_Estacion_Arribo == z )
a
?lm
lm( cuenta~ Fecha_arribo ,data = a)
lm( cuenta~ Fecha_Arribo ,data = a)
plot(a$Ciclo_Estacion_Arribo, a$cuenta)
plot( a$cuenta)
lm( cuenta~ Fecha_Arribo ,data = a)
?abline
b <- lm( cuenta~ Fecha_Arribo ,data = a)$intercept
b
b <- lm( cuenta~ Fecha_Arribo ,data = a)
str(b)
b <- lm( cuenta~ Fecha_Arribo ,data = a)$Intercept
b
b <- lm( cuenta~ Fecha_Arribo ,data = a)$coefficients
b
str(b)
b <- lm( cuenta~ Fecha_Arribo ,data = a)$coefficients[2]
b
lm( cuenta~ Fecha_Arribo ,data = a)
plot( a$cuenta)
abline(b=b)
c <- lm( cuenta~ Fecha_Arribo ,data = a)$coefficients
plot( a$cuenta)
abline(a=c[1])
c[1]
?abline
plot( a$cuenta)
abline(a=c[1], b = c[2])
abline(a=c[1], b = c[2], col ="blue")
a
res <- arrange(res, Fecha_Arribo)
a <- subset(res, Ciclo_Estacion_Arribo == z )
a
res <- eco%>%arrange(Ciclo_Estacion_Arribo, desc(Fecha_Arribo)) %>%
group_by(Ciclo_Estacion_Arribo, Fecha_Arribo) %>% summarise(cuenta = n())
a <- subset(res, Ciclo_Estacion_Arribo == z )
a
res <- arrange(res, desc(Fecha_Arribo))
res
res <- eco%>%arrange(Ciclo_Estacion_Arribo, Fecha_Arribo) %>%
group_by(Ciclo_Estacion_Arribo, Fecha_Arribo) %>% summarise(cuenta = n())
res <- arrange(res, Fecha_Arribo)
res
a <- subset(res, Ciclo_Estacion_Arribo == z )
a$Lag <- lag(a$cuenta)
a
c <- lm( cuenta~ Lag ,data = a)$coefficients
c
plot( a$cuenta)
abline(a=c[1], b = c[2], col ="blue")
plot( a$cuenta, type="l")
abline(a=c[1], b = c[2], col ="blue")
tendencia <- function(z)
{
a <- subset(res, Ciclo_Estacion_Arribo == z )
a$Lag <- lag(a$cuenta)
pendiente <- lm( cuenta~ Lag ,data = a)$coefficients[2]
return(pendiente)
}
maaply(tendencia, estaciones )
estaciones$pendiente <- mapply(tendencia, estaciones )
estaciones <- unique(eco$Ciclo_Estacion_Arribo)
res <- eco %>% arrange(Ciclo_Estacion_Arribo, Fecha_Arribo) %>%
group_by(Ciclo_Estacion_Arribo, Fecha_Arribo) %>% summarise(cuenta = n())
res <- arrange(res, Fecha_Arribo)
tendencia <- function(z) #funcion para calcular pendientes sobre el conjunto agrupado -res-
{
a <- subset(res, Ciclo_Estacion_Arribo == z )
a$Lag <- lag(a$cuenta)
pendiente <- lm( cuenta~ Lag ,data = a)$coefficients[2]
return(pendiente)
}
estaciones$pendiente <- mapply(tendencia, estaciones )
estaciones$pendiente <- mapply(tendencia, estaciones[1:10] )
estaciones[1:10]
estaciones <- unique(eco$Ciclo_Estacion_Arribo)
estaciones
estaciones[1:10]
estaciones$pendiente <- mapply(tendencia, estaciones[1:10] )
estaciones$pendiente
estaciones$pendiente <- mapply(tendencia, estaciones )
tendencia <- function(z) #funcion para calcular pendientes sobre el conjunto agrupado -res-
{
a <- subset(res, Ciclo_Estacion_Arribo == z )
if (dim(a)[1]>2)
{
a$Lag <- lag(a$cuenta)
pendiente <- lm( cuenta~ Lag ,data = a)$coefficients[2]
return(pendiente)
}
return(0)
}
estaciones$pendiente <- mapply(tendencia, estaciones )
estaciones <- unique(eco$Ciclo_Estacion_Arribo)
mapply(tendencia, estaciones )
lm( cuenta~ Lag ,data = a)$coefficients[2]
tendencia <- function(z) #funcion para calcular pendientes sobre el conjunto agrupado -res-
{
a <- subset(res, Ciclo_Estacion_Arribo == z )
if (dim(a)[1]>2)
{
a$Lag <- lag(a$cuenta)
pendiente <- lm( cuenta~ Lag ,data = a)$coefficients[2]
return(as.numeric(pendiente))
}
return(0)
}
mapply(tendencia, estaciones )
estaciones$pendiente <- mapply(tendencia, estaciones )
estaciones
estaciones
estaciones <- data.frame(estaciones=unique(eco$Ciclo_Estacion_Arribo))
estaciones$pendiente <- mapply(tendencia, estaciones$estaciones )
estaciones
hist(estaciones$estaciones)
which.max(estaciones$pendiente)
estaciones[which.max(estaciones$pendiente),]
estaciones <- arrange(estaciones, pendiente)
estaciones
estaciones <- arrange(estaciones, desc(pendiente))
head(estaciones)
EstacionesAlsa <- head(estaciones)
a2 <- subset(eco, Ciclo_Estacion_Arribo %in% EstacionesAlsa$estaciones)
a2 <- subset(res, Ciclo_Estacion_Arribo %in% EstacionesAlsa$estaciones)
ggplot(a2, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE)
a2 <- subset(res, Ciclo_Estacion_Arribo %in% EstacionesAlsa$estaciones)
ggplot(a2, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE)+
facet_wrap(~ Ciclo_Estacion_Arribo)
ggplot(a2, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE)+
facet_wrap(~ Ciclo_Estacion_Arribo) + xlab('') + theme_bw() +  ggtitle('Estaciones con mayor afluencia')
ggplot(a2, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE)+
facet_wrap(~ Ciclo_Estacion_Arribo) + xlab('') + theme_bw() +  ggtitle('Estaciones con tendencia positiva')
ggplot(a2, aes(Fecha_Arribo, cuenta)) +geom_line()+ geom_smooth(method = "lm", se = FALSE)+
facet_wrap(~ Ciclo_Estacion_Arribo) + xlab('')+ ylab('') + theme_bw() +  ggtitle('Estaciones con tendencia positiva')
hist(estaciones$pendiente)
cut(estaciones$pendiente, c(0,.2,.4))
table(cut(estaciones$pendiente, c(0,.2,.4)))
table(cut(estaciones$pendiente, c(min(estaciones$pendiente),0,.2,.4,.6)))
table(cut(estaciones$pendiente, c(min(estaciones$pendiente),0,.3,.4,.6)))
ggplot(estaciones, aes(pendiente)) +geom_histogram()
ggplot(estaciones, aes(pendiente)) +geom_histogram(fill = 'slateblue') + ylab('') + xlab('') + theme_bw() +  ggtitle('Tendencia')
